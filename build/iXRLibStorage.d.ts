import { iXRLibConfiguration, iXRStorage } from "./iXRLibCoreModel";
import { iXRResult, iXRDictStrings, TimeSpan } from "./network/utils/DotNetishTypes";
export declare class iXRLibStorage {
    static m_ixrLibConfiguration: iXRLibConfiguration;
    static InitStatics(): void;
    static ReadConfigFromBackend(bLookForAuthMechanism: boolean): Promise<iXRResult>;
    static ReadStorageFromBackend(): Promise<iXRResult>;
    static get_RestUrl(): string;
    static set_RestUrl(szValue: string): void;
    static get_SendRetriesOnFailure(): number;
    static set_SendRetriesOnFailure(nValue: number): void;
    static get_SendRetryInterval(): TimeSpan;
    static set_SendRetryInterval(tsValue: TimeSpan): void;
    static get_SendNextBatchWait(): TimeSpan;
    static set_SendNextBatchWait(tsValue: TimeSpan): void;
    static get_StragglerTimeout(): TimeSpan;
    static set_StragglerTimeout(tsValue: TimeSpan): void;
    static get_PositionCapturePeriodicity(): number;
    static set_PositionCapturePeriodicity(dValue: number): void;
    static get_FrameRateCapturePeriodicity(): number;
    static set_FrameRateCapturePeriodicity(dValue: number): void;
    static get_TelemetryCapturePeriodicity(): number;
    static set_TelemetryCapturePeriodicity(dValue: number): void;
    static get_EventsPerSendAttempt(): number;
    static set_EventsPerSendAttempt(nValue: number): void;
    static get_LogsPerSendAttempt(): number;
    static set_LogsPerSendAttempt(nValue: number): void;
    static get_TelemetryEntriesPerSendAttempt(): number;
    static set_TelemetryEntriesPerSendAttempt(nValue: number): void;
    static get_StorageEntriesPerSendAttempt(): number;
    static set_StorageEntriesPerSendAttempt(nValue: number): void;
    static get_PruneSentItemsOlderThan(): TimeSpan;
    static set_PruneSentItemsOlderThan(tsValue: TimeSpan): void;
    static get_MaximumCachedItems(): number;
    static set_MaximumCachedItems(nValue: number): void;
    static get_RetainLocalAfterSent(): boolean;
    static set_RetainLocalAfterSent(bValue: boolean): void;
    static get_ReAuthenticateBeforeTokenExpires(): boolean;
    static set_ReAuthenticateBeforeTokenExpires(bValue: boolean): void;
    static get_UseDatabase(): boolean;
    static set_UseDatabase(bValue: boolean): void;
    static get_AuthMechanism(): iXRDictStrings;
    static set_AuthMechanism(dictValue: iXRDictStrings): void;
    static ReadConfig(): boolean;
    static GetEntryAsString(szName?: string): Promise<string>;
    static GetEntryRaw(szName?: string): Promise<iXRDictStrings | null>;
    static SetEntry(data: string | iXRDictStrings, bKeepLatest: boolean, szOrigin: string, bSessionData: boolean, szName?: string): Promise<iXRResult>;
    static RemoveEntry(szName?: string): Promise<iXRResult>;
    static RemoveMultipleEntries(bSessionOnly: boolean): Promise<iXRResult>;
    static AddEntrySynchronous(ixrStorage: iXRStorage): Promise<iXRResult>;
}
